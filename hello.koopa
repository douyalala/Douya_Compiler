
.text
.globl add
add:
addi sp, sp, -16
sw a0, 12(sp)
sw a1, 8(sp)
lw t0, 12(sp)
lw t1, 8(sp)
add t0, t0, t1
sw t0, 4(sp)
lw a0, 4(sp)
addi sp, sp, 16
ret

.text
.globl sub
sub:
addi sp, sp, -16
sw a0, 12(sp)
sw a1, 8(sp)
lw t0, 12(sp)
lw t1, 8(sp)
sub t0, t0, t1
sw t0, 4(sp)
lw a0, 4(sp)
addi sp, sp, 16
ret

.text
.globl mul
mul:
addi sp, sp, -16
sw a0, 12(sp)
sw a1, 8(sp)
lw t0, 12(sp)
lw t1, 8(sp)
mul t0, t0, t1
sw t0, 4(sp)
lw a0, 4(sp)
addi sp, sp, 16
ret

.text
.globl div
div:
addi sp, sp, -16
sw a0, 12(sp)
sw a1, 8(sp)
lw t0, 12(sp)
lw t1, 8(sp)
div t0, t0, t1
sw t0, 4(sp)
lw a0, 4(sp)
addi sp, sp, 16
ret

.text
.globl main
main:
addi sp, sp, -80
sw ra, 76(sp)
li t0, 1
mv a0, t0
li t0, 2
mv a1, t0
call sub
sw a0, 68(sp)
li t0, 4
mv a0, t0
li t0, 5
mv a1, t0
call div
sw a0, 64(sp)
li t0, 3
mv a0, t0
lw a1, 64(sp)
call mul
sw a0, 60(sp)
lw a0, 68(sp)
lw a1, 60(sp)
call add
sw a0, 56(sp)
lw t0, 56(sp)
sw t0, 72(sp)
lw t0, 72(sp)
bnez t0, if_0
j else_0

if_0:
li t0, 1
sw t0, 48(sp)
j jump_0

jump_0:
lw a0, 48(sp)
li t0, 5
mv a1, t0
call div
sw a0, 44(sp)
li t0, 3
mv a0, t0
lw a1, 44(sp)
call mul
sw a0, 40(sp)
lw t0, 40(sp)
xor t0, x0, t0
snez t0, t0
sw t0, 36(sp)
li t0, 1
mv a0, t0
lw a1, 36(sp)
call add
sw a0, 32(sp)
lw t0, 32(sp)
sw t0, 52(sp)
lw t0, 72(sp)
lw t1, 52(sp)
add t0, t0, t1
sw t0, 28(sp)
lw a0, 28(sp)
lw ra, 76(sp)
addi sp, sp, 80
ret

else_0:
li t0, 1
mv a0, t0
li t0, 2
mv a1, t0
call add
sw a0, 24(sp)
lw t0, 24(sp)
li t1, 10
sgt t0, t0, t1
sw t0, 20(sp)
lw t0, 20(sp)
xor t0, x0, t0
snez t0, t0
sw t0, 16(sp)
lw t0, 16(sp)
sw t0, 48(sp)
j jump_0
